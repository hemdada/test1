<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.test1.rock.controller,com.test1.rock.service,com.test1.rock.dao"/>
    <bean class="com.wavemaker.runtime.data.spring.WMPropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>
                    classpath:rock.properties
                </value>
            </list>
        </property>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
    </bean>
    <bean id="rockWMManagedDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close" depends-on="systemPropertyInitializer" lazy-init="true"
          p:driverClass="${rock.driverClass}"
          p:jdbcUrl="${rock.url}"
          p:user="${rock.username}"
          p:password="${rock.password}"
          p:maxPoolSize="${rock.maxPoolSize}"
          p:minPoolSize="${rock.minPoolSize}"
          p:maxIdleTime="600"
          p:maxStatements="50"
          p:maxStatementsPerConnection="20"
          p:checkoutTimeout="30000"
          p:idleConnectionTestPeriod="300"
          p:unreturnedConnectionTimeout="300"
          p:debugUnreturnedConnectionStackTraces="true"
          p:acquireRetryAttempts="3"
          p:acquireRetryDelay="1000"
          p:contextClassLoaderSource="library"
          p:privilegeSpawnedThreads="true"
            />

    <bean id="rockEntityInterceptor" class="com.wavemaker.runtime.data.interceptors.WMEntityInterceptor"/>

    <bean id="rockSessionFactory" class="com.wavemaker.runtime.data.factory.TypeResolverSessionFactoryBean">
        <property name="dataSource" ref="rockDataSource"/>
        <property name="packagesToScan" value="com.test1.rock"/>
        <property name="entityInterceptor" ref="rockEntityInterceptor"/>
        <property name="mappingResources">
            <list>
                <value>
                rock-queries.hbm.xml
                </value>
            </list>
        </property>

        <property name="customTypes">
            <array value-type="com.wavemaker.runtime.data.CustomType">
                <ref bean="dateTimeCustomType"/>
            </array>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                ${rock.dialect}
                </prop>
                <prop key="hibernate.show_sql">
                    false
                </prop>
                <prop key="hibernate.globally_quoted_identifiers">
                    false
                </prop>
                <prop key="hibernate.hbm2ddl.auto">
                ${rock.hbm2ddl}
                </prop>
                <prop key="hibernate.temp.use_jdbc_metadata_defaults">
                    false
                </prop>
                <prop key="hibernate.schema_update.unique_constraint_strategy">
                    skip
                </prop>
            </props>
        </property>
    </bean>
    <bean id="rockTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="rockSessionFactory"/>
    </bean>
    <bean id="rockTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="rockSessionFactory"/>
    </bean>
    <bean id="rockWMQueryExecutor" class="com.wavemaker.runtime.data.dao.query.WMQueryExecutorImpl">
        <property name="template" ref="rockTemplate"/>
    </bean>
    <bean id="rockWMProcedureExecutor" class="com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutorImpl">
        <property name="template" ref="rockTemplate"/>
        <property name="serviceId" value="rock" />
    </bean>

    <bean id="persistentLocalDateTimeType" class="com.wavemaker.commons.data.type.WMPersistentLocalDateTime"/>
    <bean id="dateTimeCustomType" class="com.wavemaker.runtime.data.CustomType">
        <property name="type" ref="persistentLocalDateTimeType"/>
        <property name="keys">
            <list>
                <value>DateTime</value>
                <value>org.joda.time.LocalDateTime</value>
            </list>
        </property>
    </bean>
    <bean id="rockPageableHandlerMethodResolver" class="com.wavemaker.runtime.resolver.WMPageableHandlerMethodArgumentResolver" >
        <property name="pageParameterName" value="page"/>
        <property name="sizeParameterName" value="size"/>
        <property name="oneIndexedParameters" value="true"/>
        <property name="maxPageSize" value="${rock.maxPageSize}"/>
        <property name="fallbackPageable">
            <bean  class="org.springframework.data.domain.PageRequest">
                <constructor-arg  value="0"/>
                <constructor-arg  value="20"/>
            </bean>
        </property>
    </bean>

    <bean id="rockDataSource" class="com.wavemaker.runtime.data.datasource.WMDataSource">
        <property name="dataSourceType" value="${rock.dataSourceType}"/>
        <property name="jndiName" value="${rock.jndiName}"/>
        <property name="serviceId" value="rock"/>
    </bean>


    <tx:annotation-driven/>

</beans>

